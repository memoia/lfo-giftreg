# IMM4LFO 2011-09-16
#


# I wanted to split all the models into separate files.
# To do this, create models directory, create separate
# model files in there, and then in the __init__.py
# for the models dir, place from...import statements.
# also modify models to include class Meta: app_label
# ... the from...import statements for each file are annoying
# to have to maintain. tried automating this, didn't work out.
# Apparently splitting them up is bad practice since you should
# split things up by "app" instead. Not sure if I want to split
# the "app" since the gift registry is a unit that could be
# used in larger sites.

###  from userprofile import UserProfile
###  from event import Event
###  from gift import Gift
###  from recipientwishlist import RecipientWishList
###  from attendeebudget import AttendeeBudget
###  from attendeegifts import AttendeeGifts

###  import os, re
###  
###  # there must be a better way to separate all models
###  #   into separate files and have them load normally,
###  #   without having to put from x import y statements
###  #   for each one in here manually....
###  
###  # inspect and pyclbr not good here (first req import, second broken)
###  #
###  #__import__('UserProfile', fromlist=['userprofile'])
###  #   is supposed to emulate:
###  #from userprofile import UserProfile
###  #   but the former fails while the latter succeeds. 
###  #eval('from...') also doesn't work.
###  
###  def model_files():
###    return [os.path.dirname(__file__) + '/' + m for m in \
###  		filter(lambda x: x[:2]!='__' and x[-3:]=='.py' \
###  		  , os.listdir(os.path.dirname(__file__)))]
###  
###  def classes(file_path):
###    m = re.compile('^class (\w+).*')
###    l = []
###    with open(file_path, 'r') as f:
###      for line in f:
###        c = m.match(line)
###        if c:
###  	l.append(c.groups(1)[0])
###    return l
###  
###  for mf in model_files():
###    cl = classes(mf)
###    for c in cl:
###      print "from %s import %s" % (os.path.basename(mf[:-3]), c)
###      #__import__(c, fromlist=[os.path.basename(mf[:-3])])



